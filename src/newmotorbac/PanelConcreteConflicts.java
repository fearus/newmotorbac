/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelConcreteConflicts.java
 *
 * Created on May 5, 2011, 5:41:03 PM
 */

package newmotorbac;

import newmotorbac.util.OrbacPolicyContext;
import java.awt.Color;
import java.awt.Component;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import orbac.conflict.CConcreteConflict;
import orbac.securityRules.CConcreteObligation;
import orbac.securityRules.CConcretePermission;
import orbac.securityRules.CConcreteProhibition;
import orbac.securityRules.CConcreteRule;

/**
 *
 * @author fabien
 */
public class PanelConcreteConflicts extends javax.swing.JPanel {
    // policy context
    OrbacPolicyContext thisContext;

    /** Creates new form PanelConcreteConflicts */
    public PanelConcreteConflicts(OrbacPolicyContext thisContext) {
        initComponents();

        // store context
        this.thisContext = thisContext;

        // set custom table renderer
        jTableConcreteConflicts.setDefaultRenderer(Object.class, new CustomTableCellRenderer());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConcreteConflicts = new javax.swing.JTable();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(newmotorbac.NewMotorbacApp.class).getContext().getResourceMap(PanelConcreteConflicts.class);
        jButtonUpdate.setIcon(resourceMap.getIcon("jButtonUpdate.icon")); // NOI18N
        jButtonUpdate.setText(resourceMap.getString("jButtonUpdate.text")); // NOI18N
        jButtonUpdate.setName("jButtonUpdate"); // NOI18N
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTableConcreteConflicts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Infered from", "Subject", "Action", "Object"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConcreteConflicts.setName("jTableConcreteConflicts"); // NOI18N
        jTableConcreteConflicts.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableConcreteConflicts);
        jTableConcreteConflicts.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTableConcreteConflicts.columnModel.title0")); // NOI18N
        jTableConcreteConflicts.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTableConcreteConflicts.columnModel.title1")); // NOI18N
        jTableConcreteConflicts.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTableConcreteConflicts.columnModel.title2")); // NOI18N
        jTableConcreteConflicts.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTableConcreteConflicts.columnModel.title3")); // NOI18N
        jTableConcreteConflicts.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTableConcreteConflicts.columnModel.title4")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(202, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        UpdateConflictTable();
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    public void UpdateConflictTable()
    {
        try
        {
            DefaultTableModel model = (DefaultTableModel)jTableConcreteConflicts.getModel();
            model.setRowCount(0);
            // get conflicts
            Set<CConcreteConflict> conflicts = thisContext.thePolicy.GetConcreteConflicts();
            // display them
            Iterator<CConcreteConflict> ic = conflicts.iterator();
            while ( ic.hasNext() )
            {
                CConcreteConflict c = ic.next();
                String row[] = new String[5];
                CConcreteRule rel;

                rel = c.GetFirstRule();
                if ( rel instanceof CConcretePermission ) row[0] = "permission";
                else if ( rel instanceof CConcreteProhibition ) row[0] = "prohibition";
                else if ( rel instanceof CConcreteObligation ) row[0] = "obligation";
                row[1] = rel.GetName();
                row[2] = rel.GetSubject();
                row[3] = rel.GetAction();
                row[4] = rel.GetObject();
                model.addRow(row);

                rel = c.GetSecondRule();
                if ( rel instanceof CConcretePermission ) row[0] = "permission";
                else if ( rel instanceof CConcreteProhibition ) row[0] = "prohibition";
                else if ( rel instanceof CConcreteObligation ) row[0] = "obligation";
                row[1] = rel.GetName();
                row[2] = rel.GetSubject();
                row[3] = rel.GetAction();
                row[4] = rel.GetObject();
                model.addRow(row);
            }
            // update status bar

        }
        catch (Exception e)
        {
            System.out.println("ConcreteConflictsTab Update():" + e);
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableConcreteConflicts;
    // End of variables declaration//GEN-END:variables

    public class CustomTableCellRenderer extends DefaultTableCellRenderer
    {
    	// just to remove the warning
    	static final long serialVersionUID = 0;

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if( value instanceof String )
            {
            	if ( (row % 4) == 0 || (row % 4) == 1 )
                	cell.setBackground( new Color(0.8f, 0.8f, 0.5f) );
                else if ( (row % 4) == 2 || (row % 4) == 3 )
                	cell.setBackground( new Color(0.9f, 0.9f, 0.7f) );
            }
            return cell;
        }
    }
}
