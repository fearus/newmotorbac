/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelRulesPriorities.java
 *
 * Created on May 5, 2011, 5:47:26 PM
 */

package newmotorbac;

import newmotorbac.util.OrbacPolicyContext;
import java.awt.Frame;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import newmotorbac.dialog.jDialogAddPriority;
import orbac.exception.COrbacException;
import orbac.securityRules.CAbstractRule;
import orbac.securityRules.CRulePriority;

/**
 *
 * @author fabien
 */
public class PanelRulesPriorities extends javax.swing.JPanel {
    // policy context
    OrbacPolicyContext thisContext;

    /** Creates new form PanelRulesPriorities */
    public PanelRulesPriorities(OrbacPolicyContext thisContext) {
        initComponents();

        // store context
        this.thisContext = thisContext;

        // set table state variables to enable row selection
        jTableRulePriorities.setCellSelectionEnabled(false);
        jTableRulePriorities.setRowSelectionAllowed(true);
        jTableRulePriorities.setColumnSelectionAllowed(false);

        // fill table
        UpdateRulePrioritiesTable();
    }

    public void UpdateRulePrioritiesTable()
    {
        // clear table
        DefaultTableModel model = (DefaultTableModel)jTableRulePriorities.getModel();
        model.setRowCount(0);

        try
        {
            // get priorities
            HashSet<CRulePriority> priorities = thisContext.thePolicy.GetRulesPriorities();
            Iterator<CRulePriority> ic = priorities.iterator();
            while ( ic.hasNext() )
            {
                CRulePriority sc = ic.next();
                String row[] = new String[4];
                row[0] = sc.GetFirstRule();
                row[1] = sc.GetFirstOrganization();
                row[2] = sc.GetSecondRule();
                row[3] = sc.GetSecondOrganization();
                model.addRow(row);
            }
        }
        catch (Exception e)
        {
            System.out.println(e);
            e.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAddPriority = new javax.swing.JButton();
        jButtonDeletePriority = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRulePriorities = new javax.swing.JTable();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(newmotorbac.NewMotorbacApp.class).getContext().getResourceMap(PanelRulesPriorities.class);
        jButtonAddPriority.setText(resourceMap.getString("jButtonAddPriority.text")); // NOI18N
        jButtonAddPriority.setName("jButtonAddPriority"); // NOI18N
        jButtonAddPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPriorityActionPerformed(evt);
            }
        });

        jButtonDeletePriority.setText(resourceMap.getString("jButtonDeletePriority.text")); // NOI18N
        jButtonDeletePriority.setName("jButtonDeletePriority"); // NOI18N
        jButtonDeletePriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePriorityActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTableRulePriorities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Higher priority", "Organization", "Lower priority", "Organization"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRulePriorities.setColumnSelectionAllowed(true);
        jTableRulePriorities.setName("jTableRulePriorities"); // NOI18N
        jTableRulePriorities.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableRulePriorities);
        jTableRulePriorities.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableRulePriorities.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTableRulePriorities.columnModel.title0")); // NOI18N
        jTableRulePriorities.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTableRulePriorities.columnModel.title1")); // NOI18N
        jTableRulePriorities.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTableRulePriorities.columnModel.title2")); // NOI18N
        jTableRulePriorities.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTableRulePriorities.columnModel.title3")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAddPriority)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDeletePriority)
                .addContainerGap(112, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeletePriority, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddPriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPriorityActionPerformed
        try
        {
            // first check if there is more than one rule in the policy
            Map<String, CAbstractRule> allRules =  thisContext.thePolicy.GetAllAbstractRules();
            if ( allRules.size() < 2 )
            {
                JOptionPane.showMessageDialog(findActiveFrame(), "The policy must contain at least 2 abstract rules to define a priority between rules");
                return;
            }

            // open the dialog box
            jDialogAddPriority addPriorityDialogBox = new jDialogAddPriority(findActiveFrame(), true, thisContext.thePolicy);
            addPriorityDialogBox.setLocationRelativeTo(findActiveFrame());
            NewMotorbacApp.getApplication().show(addPriorityDialogBox);

            if ( addPriorityDialogBox.canceled ) return;

            thisContext.thePolicy.SetRule1AboveRule2(addPriorityDialogBox.GetMorePriorityRuleName(),
                                                     addPriorityDialogBox.GetLessPriorityRuleName(),
                                                     addPriorityDialogBox.GetFirstOrganization(),
                                                     addPriorityDialogBox.GetSecondOrganization());

            // push policy on undo/redo stack
            thisContext.panelPolicy.PushPolicy();
            // update display
            UpdateRulePrioritiesTable();
        }
        catch ( COrbacException e )
        {
            System.out.println(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonAddPriorityActionPerformed

    private void jButtonDeletePriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePriorityActionPerformed
        try
        {
            DefaultTableModel model = (DefaultTableModel)jTableRulePriorities.getModel();
            int row = jTableRulePriorities.getSelectedRow();
            String e1 = (String)model.getValueAt(row, 0);
            String e2 = (String)model.getValueAt(row, 1);
            String e3 = (String)model.getValueAt(row, 2);
            String e4 = (String)model.getValueAt(row, 3);
            thisContext.thePolicy.DeleteRule1AboveRule2(e1, e3, e2, e4);

            // push policy on undo/redo stack
            thisContext.panelPolicy.PushPolicy();
            // refresh display
            UpdateRulePrioritiesTable();
        }
        catch ( COrbacException e )
        {
            System.out.println(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonDeletePriorityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddPriority;
    private javax.swing.JButton jButtonDeletePriority;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRulePriorities;
    // End of variables declaration//GEN-END:variables

    // helper function to find a frame object to display a dialog box for example
    private Frame findActiveFrame()
    {
        Frame[] frames = JFrame.getFrames();
        for (int i = 0; i < frames.length; i++)
        {
            Frame frame = frames[i];
            if (frame.isVisible())
            {
                return frame;
            }
        }
        return null;
    }
}
