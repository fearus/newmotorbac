/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelSimulation.java
 *
 * Created on May 5, 2011, 5:53:21 PM
 */

package newmotorbac;

import newmotorbac.util.OrbacPolicyContext;
import java.util.Calendar;
import orbac.securityRules.CConcreteObligation;
import orbac.securityRules.CConcretePermission;
import orbac.securityRules.CConcreteProhibition;
import orbac.time.ITimeManager;
import orbac.usageControl.IOrbacPolicyUsageControlListener;

/**
 *
 * @author fabien
 */
public class PanelSimulation extends javax.swing.JPanel implements IOrbacPolicyUsageControlListener {
    // policy context
    OrbacPolicyContext thisContext;
    // tabs
    private PanelConcreteRules panelConcreteRules;
    private PanelContextState  panelContextState;

    /** Creates new form PanelSimulation */
    public PanelSimulation(OrbacPolicyContext thisContext) {
        initComponents();

        this.thisContext = thisContext;
        // create tabs
        panelConcreteRules = new PanelConcreteRules(thisContext);
        panelContextState = new PanelContextState(thisContext);
        // add them
        jTabbedPaneSimulation.addTab("Concrete rules", panelConcreteRules);
        jTabbedPaneSimulation.addTab("Contexts states", panelContextState);
        // store them in context
        thisContext.panelSimulation = this;
        thisContext.panelConcreteRules = panelConcreteRules;
        thisContext.panelContextState = panelContextState;
        
        // set time controls
        Calendar d = thisContext.thePolicy.GetTimeManager().GetDate();
        jSpinnerYear.setValue(d.get(Calendar.YEAR));
        jSpinnerHour.setValue(d.get(Calendar.HOUR_OF_DAY));
        jSpinnerMinute.setValue(d.get(Calendar.MINUTE));
        jSpinnerSecond.setValue(d.get(Calendar.SECOND));
        jSpinnerMonth.setValue(d.get(Calendar.MONTH));
        jSpinnerDay.setValue(d.get(Calendar.DAY_OF_MONTH));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerHour = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerMinute = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jSpinnerSecond = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerDay = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jSpinnerMonth = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jSpinnerYear = new javax.swing.JSpinner();
        jButtonSetClock = new javax.swing.JButton();
        jButtonUpdateConcretePolicy = new javax.swing.JButton();
        jCheckBoxAutomaticUpdates = new javax.swing.JCheckBox();
        jTabbedPaneSimulation = new javax.swing.JTabbedPane();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(newmotorbac.NewMotorbacApp.class).getContext().getResourceMap(PanelSimulation.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jSpinnerHour.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jSpinnerHour.setName("jSpinnerHour"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jSpinnerMinute.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jSpinnerMinute.setName("jSpinnerMinute"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jSpinnerSecond.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jSpinnerSecond.setName("jSpinnerSecond"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jSpinnerDay.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jSpinnerDay.setName("jSpinnerDay"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jSpinnerMonth.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jSpinnerMonth.setName("jSpinnerMonth"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jSpinnerYear.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jSpinnerYear.setName("jSpinnerYear"); // NOI18N

        jButtonSetClock.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jButtonSetClock.setIcon(resourceMap.getIcon("jButtonSetClock.icon")); // NOI18N
        jButtonSetClock.setText(resourceMap.getString("jButtonSetClock.text")); // NOI18N
        jButtonSetClock.setName("jButtonSetClock"); // NOI18N
        jButtonSetClock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetClockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSpinnerMinute, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jSpinnerDay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jSpinnerHour, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jSpinnerMonth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jSpinnerSecond, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jSpinnerYear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButtonSetClock, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinnerHour, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinnerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinnerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jSpinnerDay, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jSpinnerMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jSpinnerYear, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSetClock)
                .addContainerGap())
        );

        jButtonUpdateConcretePolicy.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jButtonUpdateConcretePolicy.setIcon(resourceMap.getIcon("jButtonUpdateConcretePolicy.icon")); // NOI18N
        jButtonUpdateConcretePolicy.setText(resourceMap.getString("jButtonUpdateConcretePolicy.text")); // NOI18N
        jButtonUpdateConcretePolicy.setName("jButtonUpdateConcretePolicy"); // NOI18N
        jButtonUpdateConcretePolicy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateConcretePolicyActionPerformed(evt);
            }
        });

        jCheckBoxAutomaticUpdates.setText(resourceMap.getString("jCheckBoxAutomaticUpdates.text")); // NOI18N
        jCheckBoxAutomaticUpdates.setName("jCheckBoxAutomaticUpdates"); // NOI18N
        jCheckBoxAutomaticUpdates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAutomaticUpdatesActionPerformed(evt);
            }
        });

        jTabbedPaneSimulation.setName("jTabbedPaneSimulation"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setFont(resourceMap.getFont("jSpinnerMinute.font")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonUpdateConcretePolicy)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxAutomaticUpdates)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jTabbedPaneSimulation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButtonUpdateConcretePolicy)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxAutomaticUpdates, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel8)))
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUpdateConcretePolicyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateConcretePolicyActionPerformed
        panelConcreteRules.UpdateDisplay();
        panelContextState.UpdateDisplay();
    }//GEN-LAST:event_jButtonUpdateConcretePolicyActionPerformed

    private void jCheckBoxAutomaticUpdatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAutomaticUpdatesActionPerformed
        // depending on the checkbox state we add/remove listeners
        if ( jCheckBoxAutomaticUpdates.isSelected() )
        {
            // install listeners
            thisContext.thePolicy.AddUsageControlListener(this);
        }
        else
        {
            // install listeners
            thisContext.thePolicy.RemoveUsageControlListener(this);
        }
    }//GEN-LAST:event_jCheckBoxAutomaticUpdatesActionPerformed

    private String[] monthStrings = { "January", "February", "March", "April", "May", "June",
                                      "July", "August", "September", "October", "November", "December"};
    private void jButtonSetClockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetClockActionPerformed
        // get date from controls
        Calendar date;
        int year, month = 1, day, hour, minute, second;
        year = ((Integer)jSpinnerYear.getValue()).intValue();
        hour = ((Integer)jSpinnerHour.getValue()).intValue();
        minute = ((Integer)jSpinnerMinute.getValue()).intValue();
        second = ((Integer)jSpinnerSecond.getValue()).intValue();
        month = ((Integer)jSpinnerMonth.getValue()).intValue();
        /*String monthStr = (String)jSpinnerMonth.getValue();
        for (int i = 0; i < monthStrings.length; i++)
        {
            if ( monthStrings[i].equals(monthStr) )
                month = i + 1;
        }*/
        day = ((Integer)jSpinnerDay.getModel().getValue()).intValue();
        
        date = Calendar.getInstance();
        date.set(Calendar.YEAR, year);
        date.set(Calendar.MONTH, month);
        date.set(Calendar.DAY_OF_MONTH, day);
        date.set(Calendar.HOUR_OF_DAY, hour);
        date.set(Calendar.MINUTE, minute);
        date.set(Calendar.SECOND, second);

        // set time in policy time manager
        ITimeManager tm = thisContext.thePolicy.GetTimeManager();
        tm.SetDate(date);
    }//GEN-LAST:event_jButtonSetClockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSetClock;
    private javax.swing.JButton jButtonUpdateConcretePolicy;
    private javax.swing.JCheckBox jCheckBoxAutomaticUpdates;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinnerDay;
    private javax.swing.JSpinner jSpinnerHour;
    private javax.swing.JSpinner jSpinnerMinute;
    private javax.swing.JSpinner jSpinnerMonth;
    private javax.swing.JSpinner jSpinnerSecond;
    private javax.swing.JSpinner jSpinnerYear;
    private javax.swing.JTabbedPane jTabbedPaneSimulation;
    // End of variables declaration//GEN-END:variables

    @Override
    public void NotifyPermissionStateChange(CConcretePermission permission, boolean newState) 
    {
        panelConcreteRules.UpdateDisplay();
    }

    @Override
    public void NotifyProhibitionStateChange(CConcreteProhibition prohibition, boolean newState)
    {
        panelConcreteRules.UpdateDisplay();
    }

    @Override
    public void NotifyObligationStateChange(CConcreteObligation obligation, boolean newState)
    {
        panelConcreteRules.UpdateDisplay();
    }

    @Override
    public void NotifyConcreteObligationViolation(CConcreteObligation obligation)
    {
        panelConcreteRules.UpdateDisplay();
    }

    @Override
    public void NotifyConcreteObligationFulfillment(CConcreteObligation obligation)
    {
        panelConcreteRules.UpdateDisplay();
    }

}
